#!/bin/bash

BOLD="\e[1m"
ITALIC="\e[3m"
UNDERLINE="\e[4m"
RESET="\e[0m"
BG_RED="\e[41m"
BG_GREEN="\e[42m"
BG_YELLOW="\e[43m"

# Usage function for help and bad arguments
usage() {
  echo -e ""
  echo -e "${BOLD}${UNDERLINE}RetroPie Configurator${RESET}"
  echo -e ""
  echo -e "  Configures a RetroPie installation for compatibility and"
  echo -e "  performance."
  echo -e ""
  echo -e "  This script makes changes that may cause ${BOLD}${UNDERLINE}irreparable damage${RESET}"
  echo -e "  to your configurations and hardware.  ${BOLD}Do not${RESET} use this script"
  echo -e "  unless you are ${BOLD}fully${RESET} aware of what it does and are willing to"
  echo -e "  accept the consequences of your actions."
  echo -e ""
  echo -e "  ${ITALIC}No liability or warranty is provided, of any kind, for what"
  echo -e "  using this script might do to your system.  You are responsible"
  echo -e "  for ensuring that any changes made are within your agreements"
  echo -e "  and warranty.${RESET}"
  echo -e ""
  echo -e "  For more information visit:"
  echo -e ""
  echo -e "  ${UNDERLINE}https://github.com/andrewvaughan/retropie-configurator${RESET}"
  echo -e ""
  echo -e "${BOLD}${UNDERLINE}Usage${RESET}"
  echo -e ""
  echo -e "  configurator [-h] [-d] [-v] [-u user] [-c]"
  echo -e ""
  echo -e "${BOLD}${UNDERLINE}Options${RESET}"
  echo -e ""
  echo -e "  -h, --help        Prints usage guidelines and help."
  echo -e "  -d, --debug       Turns on debugging messages"
  echo -e "  -v, --verbose     Turns on verbose debugging messages; implies -d"
  echo -e "  -u, --user USER   Sets the user that is running RetroPie (default: pi)"
  echo -e ""
}

println() {
  local line=$1 style=$2
  local width=$(tput cols)

  while (( ${#line} < width )); do
    line+=" "
  done

  echo -e "${style}${line}${RESET}"
}

error() {
  echo ""
  println "[ERROR] $1" "${BOLD}${UNDERLINE}${BG_RED}"
  echo ""
}

info() {
  echo ""
  println "$1" "${BOLD}${UNDERLINE}${BG_GREEN}"
  echo ""
}

debug() {
  if [[ $OPT_DEBUG -eq 1 ]]; then
    echo ""
    println "[DEBUG] $1" "${BOLD}${UNDERLINE}${BG_YELLOW}"
    echo ""
  fi
}


# Script Configurations

# Configuration Flags
OPT_DEBUG=0           # Debugging flags
OPT_VERBOSE=0
OPT_USER="pi"         # The user that runs RetroPie (Default: pi)

# Parse any arguments
while [ "$1" != "" ]; do
  case $1 in

    -d | --debug)    OPT_DEBUG=1
                     ;;

    -v | --verbose)  OPT_DEBUG=1
                     OPT_VERBOSE=1
                     ;;

    -u | --user )    shift
                     OPT_USER=$1
                     ;;

    -h | --help )    usage
                     exit
                     ;;

    * )              usage
                     exit 1

    esac
    shift
done


# Ensure the script is being run as root
debug "Checking that script is being run as root"
if [[ $EUID -ne 0 ]]; then
   error "This script must be run as root. Exiting."
   exit 1
fi


# Install dependencies
info "Installing dependencies (this might take a moment)..."

apt-get -y update
apt-get install -o Dpkg::Progress-Fancy="1" -y libssl-dev build-essential libffi-dev python-dev python3-dev python-pip git
apt-get -y autoremove

pip install --upgrade pip setuptools
pip install --upgrade ansible

if [ $OPT_DEBUG -eq 1 ]; then
  python --version
  pip --version
  ansible --version
  git --version
fi

debug "Updating \"/etc/ansible/ansible.cfg\" to latest from source control"
mkdir -p /etc/ansible
rm -rf /etc/ansible/ansible.cfg
curl https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg > /etc/ansible/ansible.cfg

RUN_DIR=$(mktemp -d)
debug "Working directory set as \"${RUN_DIR}\""

debug "Downloading playbook repository..."
cd "${RUN_DIR}"
git clone https://github.com/andrewvaughan/retropie-configurator.git ./

if [ $OPT_DEBUG -eq 1 ]; then
  pwd
  ls -alh
fi


# Launch Ansible script
info "Running configuration script; you may be asked for the user's password (e.g., raspberry)..."

VERBOSITY=""
if [ $OPT_DEBUG -eq 1 ]; then VERBOSITY="-v"; fi
if [ $OPT_VERBOSE -eq 1 ]; then VERBOSITY="-vv"; fi

ansible-playbook $VERBOSITY -K playbook.yml
